stages:
  - pages
  - upload_pages_nirelease
  - upload_code
  - push
  - build
  - release_win
  - setup
  - sign
  - release
  - pck_push

pages:

  stage: pages

  image: registry.lanni/pages/doxygen:latest

  script:
    - doxygen
    - mkdir -p public
    - mv docs/html/* public/
    
  when: always

  artifacts:
    paths:
      - public

push_github:
  stage: push
 

  image: registry.lanni/nibuntu/services-20.04:latest

  script:
    - git config --global --add safe.directory '*'
    - git config remote.github_cicd.url >&- || git remote add github_cicd https://NuclearInstruments:${GITHUB_TOKEN}@github.com/NuclearInstruments/SCISDK.git
    - git push -u github_cicd HEAD:master --force



docs_nirelease:
  stage: upload_pages_nirelease
  image: registry.lanni/apps/release-manager:latest
  dependencies: 
    - pages
  script:
    - mv public scisdk_docs
    - zip -r scisdk_docs.zip scisdk_docs
    - nirelease -f .ni/ni-release-docs.yaml -c -v $CI_COMMIT_TAG -m "Autogenerated by pipeline with tag $CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG
  when: on_success



nirelease-source:
  stage: upload_code
  image: registry.lanni/apps/release-manager:latest

  script:
    - nirelease -f .ni/ni-release-source.yaml -c -v $CI_COMMIT_TAG -m "Autogenerated by pipeline with tag $CI_COMMIT_TAG"

  rules:
    - if: $CI_COMMIT_TAG
  when: on_success



build_vs2022_windows:
  stage: build
  image: registry.lanni/microsoft/win10-vc-build-tools-2022:latest
  script:
    - ./build.ps1
  tags:
    - docker-windows
  artifacts:
    untracked: false
    name: windows
    paths:
      - output\scisdk-full.zip  
    expire_in: 1 week 
  rules:
    - if: $CI_COMMIT_TAG



build_zynq:
  stage: build
  image: registry.lanni/nibuntu/console-20.04:latest
  script:
    - echo $CI_COMMIT_TAG>VERSION
    - ./compile_for_zynq.sh
  artifacts:
    untracked: false
    paths:
      - build_zynq/scisdk-zynq.tar.gz
  rules:
    - if: $CI_COMMIT_TAG

build_ubuntu_all_arch:
  stage: build
  tags:
    - docker-linux
    - heavy

  parallel:
      matrix:
        - DOCKER_IMAGE: ["18.04", "20.04", "22.04"]
          ARCHITECTURE: ["x64", "i386", "arm64", "armhf"]
  variables:
      DOCKER_IMAGE_MAP: "18.04=bionic,20.04=focal,22.04=jammy"
  
  image: registry.lanni/nibuntu/build-$DOCKER_IMAGE:latest
  #image: registry.lanni/nibuntu/build-20.04:latest
  #variables:
  #  LINUXRELEASE: "focal"
  script:
    - export LINUXRELEASE=$(echo "$DOCKER_IMAGE_MAP" | awk -F, -v linuxrelease="$DOCKER_IMAGE" '{for(i=1;i<=NF;i++) if ($i ~ linuxrelease) print $i}' | cut -d'=' -f2)
    - echo "Build on $DOCKER_IMAGE"
    - echo "Build for release  $LINUXRELEASE" 
    - echo $CI_COMMIT_TAG>VERSION
    - mkdir -p tars
    - mkdir -p debs    
    - ./compile_all_architecures.sh
#    - ./compile_deb.sh
#    - mv scisdk-x64.deb debs/scisdk-$CI_COMMIT_TAG-$LINUXRELEASE-x64.deb
#    - mv scisdk-i386.deb debs/scisdk-$CI_COMMIT_TAG-$LINUXRELEASE-i386.deb
#    - mv scisdk-arm64.deb debs/scisdk-$CI_COMMIT_TAG-$LINUXRELEASE-arm64.deb
#    - mv scisdk-armhf.deb debs/scisdk-$CI_COMMIT_TAG-$LINUXRELEASE-armhf.deb
#    - mv scisdk-x64.tar.gz tars/scisdk-$CI_COMMIT_TAG-$LINUXRELEASE-x64.tar.gz
#    - mv scisdk-i386.tar.gz tars/scisdk-$CI_COMMIT_TAG-$LINUXRELEASE-i386.tar.gz
#    - mv scisdk-arm64.tar.gz tars/scisdk-$CI_COMMIT_TAG-$LINUXRELEASE-arm64.tar.gz
#    - mv scisdk-armhf.tar.gz tars/scisdk-$CI_COMMIT_TAG-$LINUXRELEASE-armhf.tar.gz
#    - cd tars
#    - tar zcvf ../scisdk-lib-ubuntu-$DOCKER_IMAGE.tar.gz .
#    - cd ../debs
#    - tar zcvf ../scisdk-deb-ubuntu-$DOCKER_IMAGE.tar.gz .

  artifacts:
    untracked: false
    paths:
      - tars/**  
      - debs/**
#   - scisdk-lib-ubuntu-$DOCKER_IMAGE.tar.gz
#    - scisdk-deb-ubuntu-$DOCKER_IMAGE.tar.gz

  rules:
    - if: $CI_COMMIT_TAG




nireleasewindows:
  stage: release_win
  image: registry.lanni/apps/release-manager:latest
  dependencies: 
    - build_vs2022_windows
  script:
    - mv output/scisdk-full.zip  output/scisdk-win-full.zip  
    # - mv linux linux_x64
    # - tar -zcvf linux_x64.tar.gz linux_x64
    - nirelease -f .ni/ni-release-windows-full.yaml -c -v $CI_COMMIT_TAG -m "Autogenerated by pipeline with tag $CI_COMMIT_TAG"
    
  rules:
    - if: $CI_COMMIT_TAG
  when: on_success

build_setup:
  stage: setup
  dependencies: 
  - nireleasewindows  

  image: registry.lanni/microsoft/innosetup:latest
  script:
    - .\build_setup.ps1 $CI_COMMIT_TAG
  tags:
    - docker-windows
  artifacts:
    untracked: false
    name: windows
    paths:
      - output/*.exe    
    expire_in: 1 week 
  rules:
    - if: $CI_COMMIT_TAG


digital_signature:
  stage: sign
  dependencies: 
  - build_setup  
  script:
    - sign_executable.cmd "output/SciSDKSetup.exe"
  tags:
    - windows-signature
  artifacts:
    untracked: false
    expire_in: "30 days"
    paths:
      - output/SciSDKSetup.exe
  rules:
    - if: $CI_COMMIT_TAG

  when: on_success


nirelease:
  stage: release
  image: registry.lanni/apps/release-manager:latest
  dependencies: 
    - build_zynq  
    - build_ubuntu_all_arch
    - digital_signature
  script:
    - cd tars
    - tar zcvf ../scisdk-lib-ubuntu.tar.gz .
    - cd ../debs
    - tar zcvf ../scisdk-deb-ubuntu.tar.gz .
    - cd ..
    # - mv linux linux_x64
    # - tar -zcvf linux_x64.tar.gz linux_x64
    - nirelease -f .ni/ni-release-zynq.yaml -c -v $CI_COMMIT_TAG -m "Autogenerated by pipeline with tag $CI_COMMIT_TAG"
    - nirelease -f .ni/ni-release-linux.yaml -c -v $CI_COMMIT_TAG -m "Autogenerated by pipeline with tag $CI_COMMIT_TAG"
    - nirelease -f .ni/ni-release-setup.yaml -c -v $CI_COMMIT_TAG -m "Autogenerated by pipeline with tag $CI_COMMIT_TAG"
    - echo "Generate diff from last release for the latest release"
    - if [ -f CHANGELOG.md ]; then LATEST_TAG=`git tag --sort=-creatordate | head -2 | tail -n 1`; fi
    - if [ -f CHANGELOG.md ]; then git diff $LATEST_TAG ./CHANGELOG.md | tail -n +6 | sed -n "/^+/p" | sed -e "s/^+//" > ./latestChanges.md; fi
    - if [ ! -f CHANGELOG.md ]; then touch latestChanges.md; fi
    - echo "Creating release with the following changelog changes:"
    - cat latestChanges.md    
    - export URLNR2=$(nirelease -f .ni/ni-release-zynq.yaml --geturl)
    - export URLNR3=$(nirelease -f .ni/ni-release-linux.yaml --geturl)
    - export URLNR4=$(nirelease -f .ni/ni-release-setup.yaml --geturl)
    - release-cli create --description "./latestChanges.md" --tag-name "$CI_COMMIT_TAG" --assets-link "[ {\"url\":\"$URLNR2\",\"name\":\"scisdk-zynq-$CI_COMMIT_TAG\"}, {\"url\":\"$URLNR3\",\"name\":\"scisdk-linux-$CI_COMMIT_TAG\"}, {\"url\":\"$URLNR4\",\"name\":\"scisdk-setup-$CI_COMMIT_TAG\"}]"
    - rm -rf .git
    - rm -rf output
    - nirelease -f ni-release-source.yaml -c -v $CI_COMMIT_TAG -m "Autogenerated by pipeline with tag $CI_COMMIT_TAG"

  rules:
    - if: $CI_COMMIT_TAG
  when: on_success

deb_push:
  stage: pck_push
  image: registry.lanni/apps/release-manager:latest
  dependencies: 
    - build_ubuntu_all_arch

  parallel:
      matrix:
        - DOCKER_IMAGE: ["18.04", "20.04", "22.04"]
          ARCHITECTURE: ["amd64", "i386", "arm64", "armhf"]
  variables:
      DOCKER_IMAGE_MAP: "18.04=bionic,20.04=focal,22.04=jammy"

  script:
    - ls -l
    - ls -l debs/
    - export LINUXRELEASE=$(echo "$DOCKER_IMAGE_MAP" | awk -F, -v linuxrelease="$DOCKER_IMAGE" '{for(i=1;i<=NF;i++) if ($i ~ linuxrelease) print $i}' | cut -d'=' -f2)
    - echo "Publishing for release  $LINUXRELEASE" 
    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk_${CI_COMMIT_TAG}_${LINUXRELEASE}_${ARCHITECTURE}.deb" -F "distribution=${LINUXRELEASE}"
#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-22.04-i386.deb" -F "distribution=jammy"
#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-22.04-arm64.deb" -F "distribution=jammy"
#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-22.04-armhf.deb" -F "distribution=jammy"

#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-20.04-x64.deb" -F "distribution=focal"
#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-20.04-i386.deb" -F "distribution=focal"
#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-20.04-arm64.deb" -F "distribution=focal"
#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-20.04-armhf.deb" -F "distribution=focal"

#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-18.04-x64.deb" -F "distribution=bionic"
#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-18.04-i386.deb" -F "distribution=bionic"
#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-18.04-arm64.deb" -F "distribution=bionic"
#    - curl -X POST "http://packages-ubuntu.lanni/api/upload" -F "file=@./debs/scisdk-18.04-armhf.deb" -F "distribution=bionic"

  rules:
    - if: $CI_COMMIT_TAG
