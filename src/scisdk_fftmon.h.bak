#ifndef HEADER_H_SCISDK_OSCILLOSCOPE
#define HEADER_H_SCISDK_OSCILLOSCOPE
#include <iostream>
#include <algorithm>
#include <list>
#include "scisdk_scinode.h"

#include <mutex>

using json = nlohmann::json;

using namespace std;

class SciSDK_FFT: public  SciSDK_Node {
public:
	SciSDK_FFT(SciSDK_HAL *hal, json j, string path);


	NI_RESULT ISetParamU32(string name, uint32_t value);
	NI_RESULT ISetParamI32(string name, int32_t value);
	NI_RESULT ISetParamString(string name, string value);

	NI_RESULT IGetParamU32(string name, uint32_t *value);
	NI_RESULT IGetParamI32(string name, int32_t *value);
	NI_RESULT IGetParamString(string name, string *value);

	NI_RESULT AllocateBuffer(T_BUFFER_TYPE bt, void **buffer);
	NI_RESULT FreeBuffer(T_BUFFER_TYPE bt, void **buffer);

	NI_RESULT ReadData(void *buffer);

	NI_RESULT ExecuteCommand(string cmd, string param);
	NI_RESULT ReadStatus(void *buffer);
private:
	uint32_t decimator=0;
	int32_t timeout;
	bool auto_arm;

	enum class ACQ_MODE {
		BLOCKING,
		NON_BLOCKING
	} acq_mode;

	enum class DATA_PROCESSING {
		RAW,
		DECODE
	} data_processing;


	NI_RESULT ConfigureFFT();
	NI_RESULT CmdArm();
	NI_RESULT CheckFFT(bool *ready, bool *armed, bool *running);

	struct  {
		uint32_t base;
		uint32_t cfg_decimator;
		uint32_t cmd_arm;
		uint32_t status_read;
		uint32_t timestamp;
		bool has_timestamp;
	} address;

	struct {
		uint32_t nsamples;
	} settings;

	uint32_t *__buffer;


};
#endif 