cpp_quote("// ==================================================================")
cpp_quote("// NI CONFIDENTIAL													")
cpp_quote("// (c) Copyright 2006-2008 by National Instruments Corp.				")
cpp_quote("// All rights reserved.												")
cpp_quote("//																	")
cpp_quote("// @file		ILVDataInterface.idl									")
cpp_quote("// @brief	Interface definitions for LabVIEW data.					")
cpp_quote("//			The files ILVDataInterface_i.c and ILVDataInterface.h	")
cpp_quote("//			are generated using ILVDataInterface.idl.				")
cpp_quote("// ==================================================================")

/** 
	@mainpage Interface to LabVIEW data and types

	An interface is being created for LabVIEW data and types. The data interface
	will allow users to interact with LabVIEW data without needed to know about
	the implementation details.

	LabVIEW source code will also use this interface to data. This will allow
	users outside the LabVIEW group to create their own implementation of the
	data interface and pass that to LabVIEW. LabVIEW will then be able to
	interact with their data directly. This will prevent the data copies to and
	from LabVIEW data types from being required when passing data to and from
	LabVIEW.

	The type interface will allow users to discover type information for data.
	There is no reason for users outside of LabVIEW to create their own
	implementation of the type interface. The LabVIEW implementation should be
	sufficient.
*/

//============================================================================
// Imports
//============================================================================

import "unknwn.idl";

//============================================================================
// Interface forward declarations.
//============================================================================

interface ILVTypeDescriptor;

//============================================================================
// cpp_quotes and includes
//============================================================================

cpp_quote("#include \"extcode.h\"")
cpp_quote("#include \"ILVTypeInterface.h\"")

// fundtypes.h will be included in extcode.h so we do not want a redefinition
// in the generated files. #if out the code generated by the #include of
// fundtypes.h below.
cpp_quote("#ifndef _fundtypes_H")
#define _WCHAR_T_DEFINED	1
#include "fundtypes.h"
typedef int32 MgErr; // defined in extcode.h
typedef uInt8 LVBoolean; //defiled in extcode.h
cpp_quote("#endif // ifndef _fundtypes")

// ============================================================================
// Pure virtual base interface for LabVIEW data.
// ============================================================================
[
	object, local,
	uuid(4a4264a2-d5d8-468d-9675-6f1df777b295),
	helpstring("ILVData"),
	pointer_default(unique)
]

/** 
	@brief Base class for the LabVIEW data interface
*/
interface ILVData : IUnknown 
{
	/** 
		@brief Get a type descriptor for the current data.
		@return The error as an MgErr.
	*/
	MgErr GetType(
		[out] ILVTypeDescriptor** typeDescriptor	///< Output the type descriptor for the data
		);

	/** 
		@brief Determines whether two data instances are equal.
		@return The error as an MgErr.
	*/
	MgErr Equals(
		[in] ILVData* data,			///< Data to compare this data to
		[out] Bool32* isEqual		///< Return true if the data passed in equal to this data
		);

	/** 
		@brief Creates a copy of this object.
		@return The error as an MgErr.
	*/
	MgErr Copy(
		[out] ILVData** dataOut			///< Output a copy of this data
		);
};

// ============================================================================
// Interface for a LabVIEW boolean.
// ============================================================================
[
	object, local,
	uuid(7AB091D1-4154-48e2-BF98-55CC20335184),
	helpstring("ILVBoolean"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for LVBoolean 
*/
interface ILVBoolean : ILVData 
{
	/// Get the value.
	LVBoolean Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] LVBoolean value		///< boolean value
		);
};

// ============================================================================
// Interface for a LabVIEW int8.
// ============================================================================
[
	object, local,
	uuid(f3ee3676-1e8e-42c2-8355-e4c07d4eb769),
	helpstring("ILVInt8"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for int8.
*/
interface ILVInt8 : ILVData 
{
	/// Get the value.
	int8 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] int8 value		///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW int16.
// ============================================================================
[
	object, local,
	uuid(8567dfb4-0d6d-46d0-b87f-a5b680d3cd82),
	helpstring("ILVInt16"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for int16.
*/
interface ILVInt16 : ILVData 
{
	/// Get the value.
	int16 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] int16 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW int32.
// ============================================================================
[
	object, local,
	uuid(878fcd1e-c70f-4940-8e54-461a4d1bb5b3),
	helpstring("ILVInt32"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for int32.
*/
interface ILVInt32 : ILVData 
{
	/// Get the value.
	int32 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] int32 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW int64.
// ============================================================================
[
	object, local,
	uuid(0344d202-0f76-4efb-ad02-deec0b480e47),
	helpstring("ILVInt64"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for int64.
*/
interface ILVInt64 : ILVData 
{
	/// Get the value.
	int64 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] int64 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW uInt8.
// ============================================================================
[
	object, local,
	uuid(35ce47f1-7a7a-43c2-a663-a6340cd72ebb),
	helpstring("ILVuInt8"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for uInt8.
*/
interface ILVuInt8 : ILVData 
{
	/// Get the value.
	uInt8 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] uInt8 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW uInt16.
// ============================================================================
[
	object, local,
	uuid(f1d1b174-ce67-4c6e-ada6-064f3f49ba42),
	helpstring("ILVuInt16"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for uInt16.
*/
interface ILVuInt16 : ILVData 
{
	/// Get the value.
	uInt16 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] uInt16 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW uInt32.
// ============================================================================
[
	object, local,
	uuid(edfcfa65-5fe2-45b9-a372-467946433e84),
	helpstring("ILVuInt32"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for uInt32.
*/
interface ILVuInt32 : ILVData 
{
	/// Get the value.
	uInt32 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] uInt32 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW uInt64.
// ============================================================================
[
	object, local,
	uuid(b173fe84-2ce5-4d23-b1b2-da1f469e2c31),
	helpstring("ILVuInt64"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for uInt64.
*/
interface ILVuInt64 : ILVData 
{
	/// Get the value.
	uInt64 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] uInt64 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW float32.
// ============================================================================
[
	object, local,
	uuid(947ab4f3-5a0c-491a-9f3e-1ffa6ca9b3af),
	helpstring("ILVFloat32"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for float32.
*/
interface ILVFloat32 : ILVData 
{
	/// Get the value.
	float32 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] float32 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW float64.
// ============================================================================
[
	object, local,
	uuid(6ba720b2-7641-4657-9a88-e4805c07d953),
	helpstring("ILVFloat64"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for float64.
*/
interface ILVFloat64 : ILVData 
{
	/// Get the value.
	float64 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] float64 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW floatExt.
// ============================================================================
[
	object, local,
	uuid(35b495a1-ef73-4602-a91e-5307ea364870),
	helpstring("ILVFloatExt"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for floatExt.
*/
interface ILVFloatExt : ILVData 
{
	/// Get the value.
	floatExt Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] floatExt value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW cmplx64.
// ============================================================================
[
	object, local,
	uuid(b34b09a6-e681-4B7B-b81f-27718a7ac22d),
	helpstring("ILVComplex64"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for cmplx64.
*/
interface ILVComplex64 : ILVData 
{
	/// Get the value.
	cmplx64 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] cmplx64 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW cmplx128.
// ============================================================================
[
	object, local,
	uuid(29cf50ff-334a-416b-8e62-4305d724ea74),
	helpstring("ILVComplex128"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for cmplx128.
*/
interface ILVComplex128 : ILVData 
{
	/// Get the value.
	cmplx128 Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] cmplx128 value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW cmplxExt.
// ============================================================================
[
	object, local,
	uuid(09b41f06-659b-4FB8-8c8c-6641fde83303),
	helpstring("ILVComplexExt"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for cmplxExt.
*/
interface ILVComplexExt : ILVData 
{
	/// Get the value.
	cmplxExt Get(void);

	/** 
		@brief Set the value.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] cmplxExt value	///< numeric value
		);
};

// ============================================================================
// Interface for a LabVIEW array.
// ============================================================================
[
	object, local,
	uuid(5b5e5197-5580-431a-ad73-9ab7261d394d), 
	helpstring("ILVArray"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for arrays.
*/
interface ILVArray : ILVData 
{
	/** 
		@brief Get the number of dimensions for the array.
		@return The error as an MgErr.
	*/
	MgErr GetNumDimensions(
		[out] uInt32* numDimensions		///< Output the number of dimensions in the array
		);

	/** 
		@brief Get the number of elements in each dimension for the array.
		@return The error as an MgErr.
	*/
	MgErr GetDimensions(
		[in, out] size_t dimensionsBuffer[]		///< INPUT: User allocated buffer of size (numDims*sizeof[size_t]). OUTPUT: Populated with dimension sizes (num elements).
		);

	/** 
		@brief Get the total number of elements in the array.
		@return The error as an MgErr.
	*/
	MgErr GetNumElements(
		[out] size_t* numElements		///< Output the total number of elements in the array
		);

	/**
		@brief Determine whether the array is empty.
		@return The TRUE if the array is empty and FALSE otherwise.
	*/
	Bool32 IsEmpty(void);

	/**
		@brief Remove all elements from the array.
	*/
	void Clear();

	/**
		@brief Struct used to dimension information for an array such as size and stride information.
	*/
	typedef struct ArrayDimensionSpecifier
	{
		size_t dimensionSize;		///< Number of elements in a dimension for an array
		ptrdiff_t stride;			///< Stride used to walk between elements in an array dimension
	} ArrayDimensionSpecifier;

	/**
		@brief Struct used to hold pointer and dimension information (sizes, strides, etc) for an array.

		LabVIEW will use this information when interacting with an array.
	*/
	typedef struct ArraySpecifier
	{
		void* dataPtr;									///< Pointer to the actual data for an array.
		ArrayDimensionSpecifier dimensionSpecifier[1];	///< Dimension information (sizes, strides, etc) for an array. One ArrayDimensionSpecifier element for each dimension in the array.
	} ArraySpecifier;

	/** 
		@brief Populate the ArraySpecifier for an array. LabVIEW will use this information when interacting with the array.

		The ArraySpecifier struct should be allocated by the caller and filled in by this function. The number of elements in the
		ArraySizeAndStride array will be equal to the number of dimensions for the array.
		@return The error as an MgErr.
	*/
	MgErr GetArraySpecifier(
		[in, out] ArraySpecifier* arraySpecifier	///< INPUT: User allocated arraySpecifier. OUTPUT: Return data pointer and dimension information for an array.
		);

	/** 
		@brief Get an element in the array.
		@return The error as an MgErr.
	*/
	MgErr GetElement(
		[in] size_t indices[], 		///< Index of element user wants to access. NOTE: The number of elements in "indices" must equal the number of dimensions in the array.
		[in] Bool32 makeCopy,		///< Specify if a copy be made for the element returned. If makeCopy is false, element will reference the element in the array. A change to one will change the other.
		[out] ILVData** element		///< Array element specified by indices.
		);

	/** 
		@brief Set an element in the array.
		@return The error as an MgErr.
	*/
	MgErr SetElement(
		[in] size_t indices[],		///< Index of where to set the new element. NOTE: The number of elements in "indices" must equal the number of dimensions in the array.
		[in] ILVData* element		///< Array element to set.
		);

	/** 
		@brief Resizes the array to the size specified by dimensions.
		@return The error as an MgErr.
	*/
	MgErr Resize(
		[in] size_t dimensions[]	///< Dimensions input used to resize the array. If NULL, the array will be made empty. NOTE: The number of elements in "dimensions" must equal the number of dimensions in the array.
		);

	/**
		@brief Change the dimensions of the array according to the dimensions input. This is similar to the LabVIEW primitive "Reshape Array."
		@return The error as an MgErr.
	*/
	MgErr Reshape(
		[in] size_t dimensions[] ///< Dimensions input used to reshape the array. If NULL, the array will be made empty. NOTE: The number of elements in "dimensions" must equal the number of dimensions in the array.
		);
		
	/**
		@brief Get an array subset starting at "indices." This is similar to the LabVIEW primitive "Index Array."
		@return The error as an MgErr.
	*/
	MgErr IndexArray(
		[in] size_t indices[],		///< Indices of where the array subset should be. If -1 is passed in for an index, that dimension will not be indexed and will all be returned.  NOTE: The number of elements in "indices" must equal the number of dimensions in the array.
		[out] ILVArray** array		///< Array subset output. The number of dimensions in this will depend on the number of dimensions in the this array and the number of elements in "indices" that are not -1.
		);
};

// Useful template version of ArraySpecifier for multiple dimensions.
// This is quoted because it uses templates, which aren't supported in IDL.
cpp_quote("// Template version of ArraySpecifier for use with multiple dimensions")
cpp_quote("// Use this to declare a multi-dimensional ArraySpecifier on the stack (avoiding the heap allocator)")
cpp_quote("// Usage:")
cpp_quote("//	ArraySpecifierT<3> arraySpec; // 3-dimensional array specifier")
cpp_quote("//	err = pIface->GetArraySpecifier((ArraySpecifier*)&arraySpec); // Cast necessary to convert to C-style ArraySpecifier")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("template<int nDims> struct ArraySpecifierT")
cpp_quote("{")
cpp_quote("	void* dataPtr;")
cpp_quote("	ArrayDimensionSpecifier dimensionSpecifier[nDims];")
cpp_quote("};")
cpp_quote("#endif // defined(__cplusplus)")


// ============================================================================
// Interface for a LabVIEW string.
// ============================================================================
[
	object, local,
	uuid(c021ae89-68d7-47e9-9ed7-69d9501c4f24), 
	helpstring("ILVString"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for strings.
*/
interface ILVString : ILVData 
{
	/**
		@brief Get the string. The returned string may not be NULL terminated.

		The elements of the string may not be altered. 
		The returned pointer is valid as long the string is not modified by a set/insert/append/replace operation.
		@return The error as an MgErr
	*/
	MgErr Get(
		[out] const uChar** stringBuffer,	///< Returned pointer to the non-NULL terminated stringBuffer
		[out] size_t* bufferLength			///< Output length of stringBuffer
		);

	/**
		@brief Get the string. The returned string is NULL terminated.

		The elements of the string may not be altered. 
		The returned pointer is valid as long the string is not modified by a set/insert/append/replace operation.
		@return The NULL-terminated C-style string. 
	*/
	MgErr GetCStr(const uChar **buffer);

	/** 
		@brief Set the string.
		@return The error as an MgErr.
	*/
	MgErr Set(
		[in] const uChar* stringBuffer,	///< String buffer allocated by the user that will be used to set the string data
		[in] size_t bufferLength		///< Length of the stringBuffer
		);

	/** 
		@brief Set the string with an ILVString.
		@return The error as an MgErr.
	*/
	MgErr SetILVString(
		[in] const ILVString * str		///< ILVString to be used to set string data
		);

	/** 
		@brief Append another string to the end of this string.
		@return The error as an MgErr.
	*/
	MgErr Append(
		 [in] const uChar* stringBuffer,	///< String buffer allocated by the user that will be used to append to the string data
		 [in] size_t bufferLength			///< Length of the stringBuffer
		);

	/** 
		@brief Append another ILVString string to the end of this string.
		@return The error as an MgErr.
	*/
	MgErr AppendILVString(
		[in] const ILVString* str			///< ILVString to append
		);

	/** 
		@brief Insert additional elements into the string at the specified position.
		@return The error as an MgErr.
	*/
	MgErr Insert(
		[in] size_t position,			///< Position in the data to insert the stringBuffer.
		[in] const uChar* stringBuffer,	///< String buffer allocated by the user that will be used to insert into the string data
		[in] size_t bufferLength		///< Length of the stringBuffer
		);

	/** 
		@brief Insert additional elements into the string at the specified position.
		@return The error as an MgErr.
	*/
	MgErr InsertILVString(
		[in] size_t position,			///< Position in the data to insert the ILVString
		[in] const ILVString* str		///< ILVString to insert from
		);

	/**
	  	@brief Replace a set of numElements in the string starting at index position.
		from the array pointed to by stringBuffer.
	  	@return The error as an MgErr.
	*/
	MgErr Replace(
		[in] size_t position,	 		///< Position in this data to begin replacing from
		[in] const uChar* stringBuffer,	///< String buffer allocated by the user that will be used to replace into the string
		[in] size_t numElements 		///< Maximum numbers of elements to be replaced
		);

	/**
	  	@brief Replace a set of numElements in the string starting at index position. 
		from the array pointed to by stringBuffer.
	  	@return The error as an MgErr.
	*/
	MgErr ReplaceILVString(
		[in] size_t position, 			///< Position in this data to begin replacing from
		[in] const ILVString* str		///< ILVString to replace from
		);

	/**
		@brief Erase a subset of characters from the string, starting at position and erasing numElements.
		@return The error as an MgErr.
	*/
	MgErr Erase(
		[in] size_t position,			///< Position to start erasing from
		[in] size_t numElements			///< Number of elements to erase
		);

	/**
		@brief Erases all the characters in the string. This does not change the capacity of the ILVString.
		NOTE: Currently, LabVIEW diagrams ignore string capacity and only pay attention to string length. If
		you change the capacity of a string and pass it to LabVIEW, LabVIEW might lose the extra capacity.
		@return The error as an MgErr.
	*/
	MgErr Clear(void);
	
	/**
		@brief Return internal capacity for growth without memory allocation. 
		@return The error as an MgErr.
	*/
	MgErr GetCapacity(
		[out] size_t* capacity		///< Number of elements string can contain before needing to resize.
		);

	/**
		@brief Allocate enough memory to hold a total of capacity characters.
		NOTE: Currently, LabVIEW diagrams ignore string capacity and only pay attention to string length. If
		you change the capacity of a string and pass it to LabVIEW, LabVIEW might lose the extra capacity.
		@return The error as an MgErr.
	*/
	MgErr SetCapacity(
		[in] size_t capacity		///< Number of elements string can contain before needing to resize again
		);

	/**
		@brief Returns if the string has 0 elements. 
		@return Boolean indicating if string is empty or not.
	*/
	Bool32 IsEmpty();

	/**
	  	@brief Returns a substring starting at position for length characters.
		@return ILVString for subString.
	*/
	MgErr SubString(
		[in] size_t position, 			///< Position of beginning of substring
		[in] size_t length,				///< Length of that substring to copy
		[out] ILVString** subString		///< If *subString is NULL, an ILVString will be created. If *subString is not NULL, it will be updated with the subString's value.
	);

	/** 
		@brief Returns the number of elements in the current string.
		@return The error as an MgErr.
	*/
	MgErr GetLength(
		[out] size_t* length	///< Output the length of the string
		);	

	/** 
		@brief Get the character in the string specified by position. 
		@return The error as an MgErr.
	*/
	MgErr GetElement(
		[in] size_t position, 		///< Specify what element to access
		[out] uChar* element		///< Return character specified by position
		);
};

// ============================================================================
// Interface for a LabVIEW cluster.
// ============================================================================
[
	object, local,
	uuid(5377527d-a5aa-4819-8933-adbf444e9ff4), 
	helpstring("ILVCluster"),
	pointer_default(unique)
]

/** 
	@brief Data interface class for clusters.
*/
interface ILVCluster : ILVData
{
	/** 
		@brief Get the element in the cluster specified by position.
		@return The error as an MgErr.
	*/
	MgErr GetElement(
		[in] uInt32 position,		///< Element location to access
		[in] Bool32 makeCopy,		///< Specify if a copy be made for the element returned. If makeCopy is false, element will reference the element in the cluster. A change to one will change the other.
		[out] ILVData** element		///< Return the element specified by position
		);

	/** 
		@brief Set the element in the cluster specified by position.
		@return The error as an MgErr.
	*/
	MgErr SetElement(
		[in] uInt32 position,		///< Element location to set
		[in] ILVData* element		///< Element to set at that location
		);

	/** 
		@brief Get the scalar element (numerics, booleans) in the cluster specified by position without wrapping it in an ILVData interface.
		@return The error as an MgErr.
	*/
	MgErr GetScalarElement(
		[in] uInt32 position,		///< Element location to access
		[in] uInt32 elementSize,	///< Size of element to access (1, 2, 4, or 8 bytes)
		[out] void* element			///< Scalar Element pointer
		);

	/** 
		@brief Set the scalar element (numerics, booleans) in the cluster specified by position without wrapping it in an ILVData interface.
		@return The error as an MgErr.
	*/
	MgErr SetScalarElement(
		[in] uInt32 position,		///< Element location to set 
		[in] uInt32 elementSize,	///< Size of element to set (1, 2, 4, or 8 bytes)
		[out] void* element			///< Scalar Element pointer
		);
};
